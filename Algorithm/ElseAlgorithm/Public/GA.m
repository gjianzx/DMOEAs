function Offspring = GA(Parent,boundary)
%GA - Genetic operators for real, binary, and permutation based encodings.
%
%   Off = GA(P) returns the offsprings generated by genetic operators,
%   where P1 is a set of parents. If P is an array of INDIVIDUAL objects,
%   then Off is also an array of INDIVIDUAL objects; while if P is a matrix
%   of decision variables, then Off is also a matrix of decision variables,
%   i.e., the offsprings will not be evaluated. P is split into two subsets
%   P1 and P2 with the same size, and each object/row of P1 and P2 is used
%   to generate TWO offsprings. Different operators are used for real,
%   binary, and permutation based encodings, respectively.
%
%   Example:
%       Off = GA(Parent)

% 中文注释
% GA - 用于实数、二进制和基于排列的编码的遗传运算符。
% Off = GA(P) 返回遗传算子生成的后代，其中 P1 是一组父母。
% 如果 P 是 INDIVIDUAL 对象的数组，则 Off 也是 INDIVIDUAL 对象的数组；
% 而如果P是决策变量矩阵，则Off也是决策变量矩阵，即后代不会被评估。（这个用不到）
% P 被分成两个大小相同的子集 P1 和 P2，P1 和 P2 的每个对象/行用于生成两个后代。
% 不同的运算符分别用于实数、二进制和基于排列的编码。

    %% Parameter setting
    [proC,disC,proM,disM] = deal(1,20,1,20);            % 设置交叉和变异的概率以及分布指数
    Parent1 = Parent(1:floor(end/2),:);                 % 从父代中取前半部分作为第一个父亲
    Parent2 = Parent(floor(end/2)+1:floor(end/2)*2,:);  % 从父代中取后半部分作为第二个父亲
    [N,D]   = size(Parent1);                            % 获取父代个体数量和维度
    
    %% Genetic operators for real encoding实数编码的遗传算子
    % Simulated binary crossover 模拟二进制交叉
    beta = zeros(N,D);
    mu   = rand(N,D);
    beta(mu<=0.5) = (2*mu(mu<=0.5)).^(1/(disC+1));
    beta(mu>0.5)  = (2-2*mu(mu>0.5)).^(-1/(disC+1));
    beta = beta.*(-1).^randi([0,1],N,D);
    beta(rand(N,D)<0.5) = 1;
    beta(repmat(rand(N,1)>proC,1,D)) = 1;
    Offspring = [(Parent1+Parent2)/2+beta.*(Parent1-Parent2)/2
                 (Parent1+Parent2)/2-beta.*(Parent1-Parent2)/2];
    % Polynomial mutation 多项式变异
    Lower = repmat(boundary.lower,2*N,1);
    Upper = repmat(boundary.upper,2*N,1);
    Site  = rand(2*N,D) < proM/D;
    mu    = rand(2*N,D);
    temp  = Site & mu<=0.5;
    Offspring       = min(max(Offspring,Lower),Upper);
    Offspring(temp) = Offspring(temp)+(Upper(temp)-Lower(temp)).*((2.*mu(temp)+(1-2.*mu(temp)).*...
                      (1-(Offspring(temp)-Lower(temp))./(Upper(temp)-Lower(temp))).^(disM+1)).^(1/(disM+1))-1);
    temp = Site & mu>0.5; 
    Offspring(temp) = Offspring(temp)+(Upper(temp)-Lower(temp)).*(1-(2.*(1-mu(temp))+2.*(mu(temp)-0.5).*...
                      (1-(Upper(temp)-Offspring(temp))./(Upper(temp)-Lower(temp))).^(disM+1)).^(1/(disM+1)));
    Offspring(Offspring<Lower) = Lower(Offspring<Lower);
    Offspring(Offspring>Upper) = Upper(Offspring>Upper);
end